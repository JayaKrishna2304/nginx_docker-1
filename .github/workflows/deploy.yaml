# name: CI/CD Pipeline
# on:
#   push:
#     branches:
#       - main
#     paths:
#       - "**.html"
#   workflow_dispatch:

# jobs:
#   code-analysis:
#     name: Code Analysis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Fetches all history for all branches and tags
          
#       # Set up Java environment for SonarQube Scanner
#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'
          
#       # Cache SonarQube packages to speed up builds
#       - name: Cache SonarQube packages
#         uses: actions/cache@v3
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
          
#       # Download and set up SonarQube Scanner
#       - name: Setup SonarQube Scanner
#         uses: warchant/setup-sonar-scanner@v7
        
#       # Run SonarQube Analysis
#       - name: Run SonarQube Analysis
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           sonar-scanner \
#             -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
#             -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
#             -Dsonar.projectKey=nginx-app \
#             -Dsonar.sources=. \
#             -Dsonar.qualitygate.wait=true
            
#   build:
#     needs: code-analysis  # This ensures build runs only after successful analysis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3
        
#       - name: Set Image Tag
#         run: echo "IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#         shell: bash
        
#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
#       - name: Build Docker Image
#         run: docker build -t jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }} .
        
#       - name: Push Docker Image
#         run: docker push jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }}

#   update-deployment:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3
        
#       - name: Set Image Tag
#         run: echo "IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#         shell: bash
        
#       - name: Authenticate GitHub
#         run: |
#           git config --global user.email "jayakrishnasuddapalli@gmail.com"
#           git config --global user.name "JayaKrishna2304"
#           git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/JayaKrishna2304/nginx_docker-1.git
          
#       - name: Update Deployment File with New Tag
#         run: |
#           sed -i "s|image: jayakrishnasuddapalli/nginx-app:.*|image: jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }}|" deployment.yaml
#           git add deployment.yaml
#           git commit -m "Updated deployment image tag to ${{ env.IMAGE_TAG }}"
#           git push origin main


























# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main  # Runs the workflow on every push to the main branch
#     paths:
#       - "**.html"  # Runs only when an HTML file is changed
#   workflow_dispatch:  # Allows manual triggering

# jobs:
#   sonarqube-analysis:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Run SonarQube Analysis
#         env:
#           SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}  # SonarQube token stored in GitHub Secrets
#           SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST_URL }}  # SonarQube server URL stored in GitHub Secrets
#         run: |
#           # Download and run SonarScanner
#           curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux.zip
#           unzip sonar-scanner.zip
#           ./sonar-scanner-6.2.1.4610-linux/bin/sonar-scanner \
#             -Dsonar.projectKey=my_html_project-123456789 \
#             -Dsonar.sources=. \
#             -Dsonar.host.url=$SONAR_HOST_URL \
#             -Dsonar.login=$SONAR_TOKEN

#   build:
#     runs-on: ubuntu-latest
#     needs: sonarqube-analysis  # Runs only after SonarQube analysis completes
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set Image Tag
#         run: echo "IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#         shell: bash

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       - name: Build Docker Image
#         run: docker build -t jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }} .

#       - name: Push Docker Image
#         run: docker push jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }}

#   update-deployment:
#     runs-on: ubuntu-latest
#     needs: build  # Runs only after the build job completes
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set Image Tag
#         run: echo "IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
#         shell: bash

#       - name: Authenticate GitHub
#         run: |
#           git config --global user.email "jayakrishnasuddapalli@gmail.com"
#           git config --global user.name "JayaKrishna2304"
#           git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/JayaKrishna2304/nginx_docker-1.git

#       - name: Update Deployment File with New Tag
#         run: |
#           sed -i "s|image: jayakrishnasuddapalli/nginx-app:.*|image: jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }}|" deployment.yaml
#           git add deployment.yaml
#           git commit -m "Updated deployment image tag to ${{ env.IMAGE_TAG }}"
#           git push origin main

































          
name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Runs the workflow on every push to the main branch
    paths:
      - "**.html"  # Runs only when an HTML file is changed

  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash


      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image
        run: docker push jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }}

  update-deployment:
    runs-on: ubuntu-latest
    needs: build  # Runs only after the build job completes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set Image Tag
        run: echo "IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash


      - name: Authenticate GitHub
        run: |
          git config --global user.email "jayakrishnasuddapalli@gmail.com"
          git config --global user.name "JayaKrishna2304"
          git remote set-url origin https://x-access-token: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@github.com/JayaKrishna2304/nginx_docker-1.git

      - name: Update Deployment File with New Tag
        run: |
          sed -i "s|image: jayakrishnasuddapalli/nginx-app:.*|image: jayakrishnasuddapalli/nginx-app:${{ env.IMAGE_TAG }}|" deployment.yaml
          git add deployment.yaml
          git commit -m "Updated deployment image tag to ${{ env.IMAGE_TAG }}"
          git push origin main


